<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAEBgT/BgkG/wIDAv8DAwP/AQIB/wEBAP8BAQD/AwIF/wECAf8FBAr/BQQI/wIDAv8FBAj/BwUX/wQB
        EP8JBB//CAMh/wQCEf8HBhD/BgUO/wEBAP8EAwf/BAQH/wEBAP8CAgH/AQEA/wEBAP8CAgH/AgMC/wMD
        A/8FBwX/AwQD/wMEA/8dKx7/AgIC/wEBAf8FBgn/CQcc/woIGv8QCyv/EAov/xANJv8MCCP/CAMY/xAJ
        O/8ZFzz/ICck/xkgIf8gLib/ICM0/xUMQ/8YEEb/Dgon/w8KK/8OCiL/EAsx/w0JIv8KCBv/Cwok/wQE
        Bv8CAgL/AAAA/xkmGv8EBQT/AAAA/y1IMf9Ebkv/AAAA/wIAB/8XDz3/FxBP/xcPRP8UDT7/DQM4/w4O
        IP8fKif/EhMj/zEvNv9cXlb/W2hV/1VdTP9KTkD/Cgce/xUOOf8VDzz/FQ8//xYQRf8XE0b/FBE1/xUO
        Qf8VCjf/BwYO/wAAAP87XT//Olk+/wAAAP8CAgL/AQAA/26ueP97xYb/OVc8/w4KD/8IBhX/EgpA/w8H
        R/8zSEj/THRO/yowTf8LAzH/Fh0d/w4QFP8bMSb/DxQm/wwDNf8UDzT/FxBH/xQLSP8RCDr/Fg9Q/wUA
        Jf8GACf/CwsZ/yUsKf8NDgz/YZtq/3zDh/8KDAr/AAAA/wQEBP8EAAb/HScf/3Ovg/+S36X/Volg/ytD
        Kv8+YUH/LEMy/4LLjv8zSTj/BwYR/0VjXf9GaEn/IS8q/xUWLf8SEyf/IipE/xcQTf8LByX/GiUh/xki
        H/8OEhD/Unpc/3Csev9Gb0n/ZJxv/yEyJf+T3qn/Hyog/wMABP8EBAT/BAMF/w4IDf8MCA3/AAAA/zJH
        Ov+f67r/RmlP/2OXb/98tZD/ITAm/1F4Xf9smnz/YI5t/wAAAP9QeFz/JTcp/xooG/9Vg1r/AAAA/wAA
        AP9BYUj/P11G/wcJBv9/wZD/Pl5G/zdUPf9kk3T/g7yY/0ZlVv8DAAz/DwsO/wQDBf8IBQr/Fw0s/wkB
        If9Ubmf/sOrc/2yShP8rPTL/q+rT/3KWjf8AAAD/X4F0/3yomf9NZGH/AAAA/3qklf9LZ1z/JC8s/3af
        kv9ZdG3/EBMS/zxSSf9CWVH/AQEA/4O2oP83UT3/EhkT/4K0nP+DtKL/W3xu/w0BQP8WDSr/BwQH/wkF
        BP8aD1z/EwZj/6rOxP9hdnX/AAAA/0ZXVP+DoZ7/Ynp6/0FRTv9ifHv/cImL/1JpZP9QaWL/O05J/0VZ
        Vv9GXVX/Wnhx/2SAff9FXVP/eJeW/2+Kif8wPjX/mb68/0NXT/8yQjz/dpSX/1Beaf+Uu7D/FQVz/x0Q
        Xv8KBQb/CwYP/xkRWv8gELD/Rk2E/5S0sf+WuLP/TF9X/0JRUP8RFhL/OURQ/xUcHf8gKSf/DwoS/ywb
        OP8aCiH/FQ0b/yQXLP8uHzn/HhMl/xMQGP8eJST/KjQ7/yYuPP9CUk3/Y3x9/0VXUP+o0Mn/kK65/yon
        ef8eEpz/GxJk/wsGDP8PCSP/HRRx/xkRYv8OBUH/Fhkg/yYka/8TETf/BAMP/woHI/8LBEn/Gwws/ywQ
        Nv85Gkz/UjNm/zchRf8ZHhn/Fg8a/ygRMv88G07/QSBU/y8SNf8EAQv/DwhK/wMCGf8AAAj/EAsv/zEy
        eP8XFUv/DAU+/x8XeP8XEGL/Dggc/w4IHf8cE3P/FxFn/wcHCf8FAxr/IBSY/xcOWv8ZEFn/HBRp/xEO
        N/8VDBP/ORpI/0k3Wf8eLx3/IzEe/zMrR/8dBDL/GxEk/xsYIP8dDSX/ORtT/xcOHP8RDjv/HhZs/x0S
        Zf8dEXX/HhCP/wcFHv8GBQP/EwxF/x0TZP8LBg7/Dggg/x0UhP8QCzb/BgQG/xYOY/8dE3T/FQxR/xoS
        bf8IBxX/Dwos/xEITP8iJEr/L0ot/xwiGP84RlT/DgA8/0FKUf9JXFD/NEs3/ystMf8cClH/JBdq/xEM
        Mv8MCh//HBJv/xIKRf8ZElv/FxBd/wcFEf8MCCT/IBWD/xAKK/8SDDz/IBWP/wsHI/8UC0r/IxWd/xAL
        Pf8cFXb/Ew5H/xgOWf8bD13/Hw9+/y4fSP8bFBv/JSgl/zw/W/87NUf/ISce/wwVDP8AAAD/CgwK/wcG
        A/8QCjn/GQ5k/x8Vcv8bEWX/HBJu/wwIJv8lGaD/Egs6/wkGHv8bD2D/EQkn/wsHFv8WDk7/CAUa/yIX
        kf8ZEmv/FA9J/xcPV/8hFWj/IR1L/yAjPP8fFCf/PEE8/ygzJ/8EAAf/GhwW/xwjGv8MAgz/BQwF/wcH
        CP8RBxP/EwkZ/yEdNP8lIDv/Gg9R/x0Sa/8eFGv/FhBR/xkSaf8gFoz/BgQT/xMMPv8IBQj/CAQG/wsI
        Gv8VDlP/GxR4/xYRV/8MCCj/IBV5/yQqNv8fLQ//JytY/yopcv86O2T/UIdK/ycxJP8IAAn/BQIE/yQu
        I/8hIiP/FAYW/w0HDv8BAAL/CBAH/0hrSf8YDjj/GhNm/yYamf8ZEVr/FA1H/x0TgP8SC0b/DQcf/wkF
        B/8MBw//BgQG/xELSf8dEoD/GhNn/woEIP8nKVP/K0At/yMeYv8YC3z/Hg59/x8Qbv8mHEz/SVJX/0Jp
        P/8uMzX/PzlM/0lZS/8oLCr/HRYe/w8NEP8RFQ//QldN/yEUgP8kHpf/IRiP/xUNUP8WDlH/Gg9m/xEK
        Qv8HBAT/DgcR/w0HEf8QCAn/EAlK/x4Se/8eFYH/Dwk1/yIqJv8qPS//HApS/x4PTP8lIUD/JSow/x0d
        Mf8nKDb/MjNP/xoSRf8NADD/RlxT/zpDO/8YGxn/DxMP/xYdFf81PUD/IRdI/x8Yh/8bEm//Cwge/xwT
        dP8bEGn/Dwo//xMIDv8OBxH/CQUM/x0MHv8PCB//HhJ7/xwTd/8MBi7/ERYO/yY4Iv8sH1r/MC1I/xAW
        C/8KDQr/BgsD/wcDBv8WByP/FQ4u/yEnOf9EaUX/BAcD/wAAAP8BAQH/AAAA/w0bCv8+Pkn/DwAa/wUG
        EP8SDEH/HBJ4/xkRbf8OCCL/Hw0h/wsGDf8RBxP/Jw8u/xYKFv8MCB3/HRJ+/xkPdv8eGnP/HioS/xkn
        Hv8PFw7/HRwc/y8/L/8yQzj/Oj9A/wsRBv8LCQ3/NTBU/1aEXP8uOC7/IRQk/xYPF/8WFhf/LUgp/z4v
        Vv8tC0X/Eg5S/xoQbP8aEXr/DAge/xgLF/8pEDD/FAkW/x0NIf8lDyr/LRE1/xUKFP8TDEX/KBZo/x4S
        bf8cHh//MDcx/zlQO/84PTn/KSsp/yQrJv8sKD7/PU5I/xIaD/8aBiX/OzZP/05xUP8QERD/AQEB/xsa
        Gv85PE3/EQch/zkVVP8mGZT/Fg5c/xMMR/8aDR7/KxIx/ykRL/8gDyX/JxIs/xUJGf8hDSj/JA4i/xkO
        SP8eEUD/HA8c/y0XN/8dDSb/Fgsl/xwSOv8yJVD/PTtH/xwlF/8jEz7/RFNL/xMkCv8TFRL/VnpX/y03
        MP8MCw7/AAAA/yUvMP8QDSj/Kw9G/yAQXP8NCj//Fw06/x8NHv8cDCL/GAsc/ycTLf8nEi3/DQYP/xkK
        Hf8kDyf/HA41/wYEFv8vGjT/NB5B/xkQKf8ZECL/JCpA/z9TTv86LUD/Kj4o/yQxK/8rLj//M0FM/z1M
        Rf9LZEn/KDAp/wkMCf8HBgf/IzEk/w4RFP8uD0X/KBJN/wMFHf8cDjX/Hgsd/xsLIP8QBxL/KRMv/yMR
        Kf8YChr/PRhH/x0MIP8gDyz/NxtE/0QiTP8qFjn/FRAz/xseIP8mLCf/Nksz/xomGP9CaUL/GSwX/yQu
        L/8UBUL/UW1e/0RkRP8aER3/DwQQ/wkMCf87Sj7/Iykl/zoSOv8uEz//AQMT/xcMLv8dDB3/PRdG/xsL
        H/8lESr/IA8l/yYQK/8yFDn/GAoa/xYLIP8bECv/Hw4f/0MZR/8HBBX/JCsn/wUHBP8hMCL/KD0m/xom
        Gf8XIRb/SnFP/1R8WP9KYEr/LCQv/wMJA/8MBg3/FhsX/y49Mv8XEC3/VSJa/x4MHP8AAwr/GAwj/xkL
        G/82FT7/KhAx/yMRKf8kESr/Jg8s/x4MJP8ZCx3/Ig4n/w0HEf8MBg3/Vh9U/w8DE/8gITj/LEUq/wAD
        AP8AAAH/BAUE/wUIBf8mMCf/MTwz/x8uH/8VCRb/CAQI/wMFA/8+Vzv/GRsj/xADFv9VI13/DQcR/w8I
        Ef8lDyv/GQsd/xwMIP8nEC3/JxIt/ycSLf8YCx3/LBI0/xoMHf8hDyb/JxEr/xEIFf83FTb/RRlF/xIU
        HP8zNTr/RWtH/ytLJ/8JCwn/AAAA/wgECf8LCQz/AAAA/wQFBP8LAAz/FSEU/z5KRv8fJyv/SRtE/z4X
        Ov8OCBL/JxEq/yEOJf8eDCH/JxAr/xoLHv8qEzH/IhAn/xQJF/8qEi//IA0l/x8OJP8dDSL/JxAs/w8I
        EP9lJF//SClG/wEAFf8lIz//XpZj/0NpQf8kKST/EhAS/wQBA/8JDAn/FQ8V/z5VOv9Selb/Fwsx/yYh
        MP9BIUX/HA4g/yMQKf8cDCH/Hg4j/yQPKf8sETL/FAkY/yUSK/8oEy7/Fwwc/xkMHf8qEjL/Ggwf/xYK
        Gv8ZCx3/FQoX/xUJFP9vJmv/MRU3/wAAE/8WEUn/KB5K/z5LSP9XjVf/QWlB/zZMN/84KD7/Q2BL/xQa
        If8mEC3/MBw3/xEMFf8bDB//Fwsb/xkLHf8aDR7/LRIz/xwMIP8YDBz/KhQw/yURKv8XDBv/Gw0f/yEO
        JP8lECv/Gwwf/xMJGP8aDB3/Gw0g/xkKGP+CMHr/XCRT/xIKJP8CAR3/AAEK/yAiMv9BaUP/FR4Y/wUA
        Gf8PAR7/PhQ//z4YPv8hFSb/IxAn/xwMIP8VChr/HQ0i/yMQKv8hDSX/Hw4j/xkMHf8oEy7/KRMv/xcL
        Gv8jDyb/PBlF/ywTM/8bDR//Gw0g/yEOJ/8lESn/Hg4i/woFC/9PHUv/gC91/3Qta/9GFUL/KiQs/1Ve
        Uv9UJFL/VR9P/2ImXf82FjT/DggP/yoTL/8iDyb/IQ8m/x0NIv8dDSL/KxMy/zwXQ/8sEzH/Gwwg/yoU
        MP8fDiT/Hw4j/ysTMf83Fz//JRAq/xIJFf8VChj/DgcR/xUKGP82Fjz/LxU2/xAJFP8RCRL/MxMu/0wf
        Rv8yNTP/SSFF/0UXQP8nECb/EAgR/xMLF/8vFTX/MxY6/xcKGv8QCBL/FQoX/xQKF/8oES3/OBY+/y8T
        Nf8gDSX/IhAm/ygSLv8lESr/LRQz/y0VNP8qFDD/JBIq/ygTL/8sFTL/IA8k/y4VNP81GT3/ORtB/y8X
        Nv8bDiL/EgwX/xQHF/8RCBT/EgsX/x4PJf8wFzj/OBpA/zUZPf8rFDH/IA8k/y0VM/8oEy7/JRIr/y0V
        NP8uFTT/LRUz/yURLP8pFDH/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>